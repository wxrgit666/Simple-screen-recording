name: Build SimpleRecorder

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.2.0

    - name: Restore NuGet packages
      run: nuget restore FluentScreenRecorder.sln

    - name: Try simple build first
      shell: cmd
      run: |
        echo Running simple build...
        call simple-build.bat
      continue-on-error: true

    - name: Build UWP Application
      run: |
        msbuild FluentScreenRecorder.sln /p:Configuration=Release /p:Platform=x64 /p:GenerateAppxPackageOnBuild=true /p:AppxBundlePlatforms=x64 /p:BuildAppxUploadPackageForUap=true
      continue-on-error: true

    - name: Check build outputs
      shell: cmd
      run: |
        echo === Checking for build outputs ===
        dir FluentScreenRecorder /s /b | findstr /i "\.appx \.msix \.exe" || echo No appx/msix/exe files found
        echo === Checking AppPackages ===
        if exist FluentScreenRecorder\AppPackages (dir FluentScreenRecorder\AppPackages /s) else (echo AppPackages folder not found)
        echo === Checking bin folder ===
        if exist FluentScreenRecorder\bin (dir FluentScreenRecorder\bin /s) else (echo bin folder not found)

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: SimpleRecorder-Packages
        path: |
          FluentScreenRecorder/AppPackages/**/*
          FluentScreenRecorder/bin/x64/Release/**/*
          FluentScreenRecorder/bin/Release/**/*
          **/*.appx
          **/*.msix

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          FluentScreenRecorder/AppPackages/**/*.msix
          FluentScreenRecorder/AppPackages/**/*.appx
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}